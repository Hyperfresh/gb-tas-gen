package mrwint.gbtasgen.tools.deasm;

import java.util.Arrays;
import java.util.List;

public class OpCode {
	public String name;
	public int extraBytes;
	public int opCode;
	public OpCode(String name, int opCode, int extraBytes) {
		this.name = name;
		this.opCode = opCode;
		this.extraBytes = extraBytes;
	}

	public static OpCode[] opCodesUnsorted = {
		new OpCode("#ERROR#", 0x100, -1),
		new OpCode("ADC A", 0x8f, 0),
		new OpCode("ADC B", 0x88, 0),
		new OpCode("ADC C", 0x89, 0),
		new OpCode("ADC D", 0x8a, 0),
		new OpCode("ADC E", 0x8b, 0),
		new OpCode("ADC H", 0x8c, 0),
		new OpCode("ADC [HL]", 0x8e, 0),
		new OpCode("ADC L", 0x8d, 0),
		new OpCode("ADC x", 0xce, 1),
		new OpCode("ADD A", 0x87, 0),
		new OpCode("ADD B", 0x80, 0),
		new OpCode("ADD C", 0x81, 0),
		new OpCode("ADD D", 0x82, 0),
		new OpCode("ADD E", 0x83, 0),
		new OpCode("ADD H", 0x84, 0),
		new OpCode("ADD [HL]", 0x86, 0),
		new OpCode("ADD HL, BC", 0x9, 0),
		new OpCode("ADD HL, DE", 0x19, 0),
		new OpCode("ADD HL, HL", 0x29, 0),
		new OpCode("ADD HL, SP", 0x39, 0),
		new OpCode("ADD L", 0x85, 0),
		new OpCode("ADD SP, x", 0xe8, 1),
		new OpCode("ADD x", 0xc6, 1),
		new OpCode("AND A", 0xa7, 0),
		new OpCode("AND B", 0xa0, 0),
		new OpCode("AND C", 0xa1, 0),
		new OpCode("AND D", 0xa2, 0),
		new OpCode("AND E", 0xa3, 0),
		new OpCode("AND H", 0xa4, 0),
		new OpCode("AND [HL]", 0xa6, 0),
		new OpCode("AND L", 0xa5, 0),
		new OpCode("AND x", 0xe6, 1),
		new OpCode("CALL C, ?", 0xdc, 2),
		new OpCode("CALL NC, ?", 0xd4, 2),
		new OpCode("CALL NZ, ?", 0xc4, 2),
		new OpCode("CALL Z, ?", 0xcc, 2),
		new OpCode("CALL ?", 0xcd, 2),
		new OpCode("CCF", 0x3f, 0),
		new OpCode("CP A", 0xbf, 0),
		new OpCode("CP B", 0xb8, 0),
		new OpCode("CP C", 0xb9, 0),
		new OpCode("CP D", 0xba, 0),
		new OpCode("CP E", 0xbb, 0),
		new OpCode("CP H", 0xbc, 0),
		new OpCode("CP [HL]", 0xbe, 0),
		new OpCode("CPL", 0x2f, 0),
		new OpCode("CP L", 0xbd, 0),
		new OpCode("CP x", 0xfe, 1),
		new OpCode("DAA", 0x27, 0),
		new OpCode("DEBUG", 0xed, 0),
		new OpCode("DEC A", 0x3d, 0),
		new OpCode("DEC B", 0x5, 0),
		new OpCode("DEC BC", 0xb, 0),
		new OpCode("DEC C", 0xd, 0),
		new OpCode("DEC D", 0x15, 0),
		new OpCode("DEC DE", 0x1b, 0),
		new OpCode("DEC E", 0x1d, 0),
		new OpCode("DEC H", 0x25, 0),
		new OpCode("DEC HL", 0x2b, 0),
		new OpCode("DEC [HL]", 0x35, 0),
		new OpCode("DEC L", 0x2d, 0),
		new OpCode("DEC SP", 0x3b, 0),
		new OpCode("DI", 0xf3, 0),
		new OpCode("EI", 0xfb, 0),
		new OpCode("DB $76 ;HALT (PREVENTS RGBASM FROM PUTTING IN AN EXTRA NOP)", 0x76, 0),
		new OpCode("INC A", 0x3c, 0),
		new OpCode("INC B", 0x4, 0),
		new OpCode("INC BC", 0x3, 0),
		new OpCode("INC C", 0xc, 0),
		new OpCode("INC D", 0x14, 0),
		new OpCode("INC DE", 0x13, 0),
		new OpCode("INC E", 0x1c, 0),
		new OpCode("INC H", 0x24, 0),
		new OpCode("INC HL", 0x23, 0),
		new OpCode("INC [HL]", 0x34, 0),
		new OpCode("INC L", 0x2c, 0),
		new OpCode("INC SP", 0x33, 0),
		new OpCode("JP C, ?", 0xda, 2),
		new OpCode("JP [HL]", 0xe9, 0),
		new OpCode("JP NC, ?", 0xd2, 2),
		new OpCode("JP NZ, ?", 0xc2, 2),
		new OpCode("JP Z, ?", 0xca, 2),
		new OpCode("JP ?", 0xc3, 2),
		new OpCode("JR C, x", 0x38, 1),
		new OpCode("JR NC, x", 0x30, 1),
		new OpCode("JR NZ, x", 0x20, 1),
		new OpCode("JR Z, x", 0x28, 1),
		new OpCode("JR x", 0x18, 1),
		new OpCode("LD A, A", 0x7f, 0),
		new OpCode("LD A, B", 0x78, 0),
		new OpCode("LD A, C", 0x79, 0),
		new OpCode("LD A, D", 0x7a, 0),
		new OpCode("LD A, E", 0x7b, 0),
		new OpCode("LD A, H", 0x7c, 0),
		new OpCode("LD A, L", 0x7d, 0),
		new OpCode("LD A, [$FF00+C]", 0xf2, 0),
		new OpCode("LD A, [$FF00+x]", 0xf0, 1),
		new OpCode("LD A, [BC]", 0xa, 0),
		new OpCode("LD A, [DE]", 0x1a, 0),
		new OpCode("LD A, [HL]", 0x7e, 0),
		new OpCode("LD A, [HLD]", 0x3a, 0),
		new OpCode("LD A, [HLI]", 0x2a, 0),
		new OpCode("LD A, [?]", 0xfa, 2),
		new OpCode("LD A, x", 0x3e, 1),
		new OpCode("LD B, A", 0x47, 0),
		new OpCode("LD B, B", 0x40, 0),
		new OpCode("LD B, C", 0x41, 0),
		new OpCode("LD [BC], A", 0x2, 0),
		new OpCode("LD B, D", 0x42, 0),
		new OpCode("LD B, E", 0x43, 0),
		new OpCode("LD B, H", 0x44, 0),
		new OpCode("LD B, [HL]", 0x46, 0),
		new OpCode("LD B, L", 0x45, 0),
		new OpCode("LD B, x", 0x6, 1),
		new OpCode("LD C, A", 0x4f, 0),
		new OpCode("LD C, B", 0x48, 0),
		new OpCode("LD C, C", 0x49, 0),
		new OpCode("LD C, D", 0x4a, 0),
		new OpCode("LD C, E", 0x4b, 0),
		new OpCode("LD C, H", 0x4c, 0),
		new OpCode("LD C, [HL]", 0x4e, 0),
		new OpCode("LD C, L", 0x4d, 0),
		new OpCode("LD C, x", 0xe, 1),
		new OpCode("LD D, A", 0x57, 0),
		new OpCode("LD D, B", 0x50, 0),
		new OpCode("LD D, C", 0x51, 0),
		new OpCode("LD D, D", 0x52, 0),
		new OpCode("LD D, E", 0x53, 0),
		new OpCode("LD [DE], A", 0x12, 0),
		new OpCode("LD D, H", 0x54, 0),
		new OpCode("LD D, [HL]", 0x56, 0),
		new OpCode("LD D, L", 0x55, 0),
		new OpCode("LD D, x", 0x16, 1),
		new OpCode("LD E, A", 0x5f, 0),
		new OpCode("LD E, B", 0x58, 0),
		new OpCode("LD E, C", 0x59, 0),
		new OpCode("LD E, D", 0x5a, 0),
		new OpCode("LD E, E", 0x5b, 0),
		new OpCode("LD E, H", 0x5c, 0),
		new OpCode("LD E, [HL]", 0x5e, 0),
		new OpCode("LD E, L", 0x5d, 0),
		new OpCode("LD E, x", 0x1e, 1),
		new OpCode("LD [$FF00+C], A", 0xe2, 0),
		new OpCode("LD [$FF00+x], A", 0xe0, 1),
		new OpCode("LD H, A", 0x67, 0),
		new OpCode("LD H, B", 0x60, 0),
		new OpCode("LD H, C", 0x61, 0),
		new OpCode("LD H, D", 0x62, 0),
		new OpCode("LD H, E", 0x63, 0),
		new OpCode("LD H, H", 0x64, 0),
		new OpCode("LD H, [HL]", 0x66, 0),
		new OpCode("LD H, L", 0x65, 0),
		new OpCode("LD [HL], A", 0x77, 0),
		new OpCode("LD [HL], B", 0x70, 0),
		new OpCode("LD [HL], C", 0x71, 0),
		new OpCode("LD [HL], D", 0x72, 0),
		new OpCode("LD [HLD], A", 0x32, 0),
		new OpCode("LD [HL], E", 0x73, 0),
		new OpCode("LD [HL], H", 0x74, 0),
		new OpCode("LD [HLI], A", 0x22, 0),
		new OpCode("LD [HL], L", 0x75, 0),
		new OpCode("LD HL, [SP+x]", 0xf8, 1),
		new OpCode("LD [HL], x", 0x36, 1),
		new OpCode("LD H, x", 0x26, 1),
		new OpCode("LD L, A", 0x6f, 0),
		new OpCode("LD L, B", 0x68, 0),
		new OpCode("LD L, C", 0x69, 0),
		new OpCode("LD L, D", 0x6a, 0),
		new OpCode("LD L, E", 0x6b, 0),
		new OpCode("LD L, H", 0x6c, 0),
		new OpCode("LD L, [HL]", 0x6e, 0),
		new OpCode("LD L, L", 0x6d, 0),
		new OpCode("LD L, x", 0x2e, 1),
		new OpCode("LD SP, HL", 0xf9, 0),
		new OpCode("LD BC, ?", 0x1, 2),
		new OpCode("LD DE, ?", 0x11, 2),
		new OpCode("LD HL, ?", 0x21, 2),
		new OpCode("LD SP, ?", 0x31, 2),
		new OpCode("LD [?], A", 0xea, 2),
		new OpCode("NOP", 0x0, 0),
		new OpCode("OR A", 0xb7, 0),
		new OpCode("OR B", 0xb0, 0),
		new OpCode("OR C", 0xb1, 0),
		new OpCode("OR D", 0xb2, 0),
		new OpCode("OR E", 0xb3, 0),
		new OpCode("OR H", 0xb4, 0),
		new OpCode("OR [HL]", 0xb6, 0),
		new OpCode("OR L", 0xb5, 0),
		new OpCode("OR x", 0xf6, 1),
		new OpCode("POP AF", 0xf1, 0),
		new OpCode("POP BC", 0xc1, 0),
		new OpCode("POP DE", 0xd1, 0),
		new OpCode("POP HL", 0xe1, 0),
		new OpCode("PUSH AF", 0xf5, 0),
		new OpCode("PUSH BC", 0xc5, 0),
		new OpCode("PUSH DE", 0xd5, 0),
		new OpCode("PUSH HL", 0xe5, 0),
		new OpCode("RETI", 0xd9, 0),
		new OpCode("RET C", 0xd8, 0),
		new OpCode("RET NC", 0xd0, 0),
		new OpCode("RET NZ", 0xc0, 0),
		new OpCode("RET Z", 0xc8, 0),
		new OpCode("RET", 0xc9, 0),
		new OpCode("RLA", 0x17, 0),
		new OpCode("RLCA", 0x7, 0),
		new OpCode("RRA", 0x1f, 0),
		new OpCode("RRCA", 0xf, 0),
		new OpCode("RST $0", 0xc7, 0),
		new OpCode("RST $10", 0xd7, 0),
		new OpCode("RST $18", 0xdf, 0),
		new OpCode("RST $20", 0xe7, 0),
		new OpCode("RST $28", 0xef, 0),
		new OpCode("RST $30", 0xf7, 0),
		new OpCode("RST $38", 0xff, 0),
		new OpCode("RST $8", 0xcf, 0),
		new OpCode("SBC A", 0x9f, 0),
		new OpCode("SBC B", 0x98, 0),
		new OpCode("SBC C", 0x99, 0),
		new OpCode("SBC D", 0x9a, 0),
		new OpCode("SBC E", 0x9b, 0),
		new OpCode("SBC H", 0x9c, 0),
		new OpCode("SBC [HL]", 0x9e, 0),
		new OpCode("SBC L", 0x9d, 0),
		new OpCode("SBC x", 0xde, 1),
		new OpCode("SCF", 0x37, 0),
		new OpCode("DB $10 ;STOP (PREVENTS RGBASM FROM PUTTING IN AN EXTRA NOP)", 0x10, 0),
		new OpCode("SUB A", 0x97, 0),
		new OpCode("SUB B", 0x90, 0),
		new OpCode("SUB C", 0x91, 0),
		new OpCode("SUB D", 0x92, 0),
		new OpCode("SUB E", 0x93, 0),
		new OpCode("SUB H", 0x94, 0),
		new OpCode("SUB [HL]", 0x96, 0),
		new OpCode("SUB L", 0x95, 0),
		new OpCode("SUB x", 0xd6, 1),
		new OpCode("XOR A", 0xaf, 0),
		new OpCode("XOR B", 0xa8, 0),
		new OpCode("XOR C", 0xa9, 0),
		new OpCode("XOR D", 0xaa, 0),
		new OpCode("XOR E", 0xab, 0),
		new OpCode("XOR H", 0xac, 0),
		new OpCode("XOR [HL]", 0xae, 0),
		new OpCode("XOR L", 0xad, 0),
		new OpCode("XOR x", 0xee, 1),
		new OpCode("LD [?], SP", 0x08, 2),
	};
	public static OpCode[] opCodesCBUnsorted = {
		new OpCode("BIT 0, A", 0x47, 0),
		new OpCode("BIT 0, B", 0x40, 0),
		new OpCode("BIT 0, C", 0x41, 0),
		new OpCode("BIT 0, D", 0x42, 0),
		new OpCode("BIT 0, E", 0x43, 0),
		new OpCode("BIT 0, H", 0x44, 0),
		new OpCode("BIT 0, [HL]", 0x46, 0),
		new OpCode("BIT 0, L", 0x45, 0),
		new OpCode("BIT 1, A", 0x4f, 0),
		new OpCode("BIT 1, B", 0x48, 0),
		new OpCode("BIT 1, C", 0x49, 0),
		new OpCode("BIT 1, D", 0x4a, 0),
		new OpCode("BIT 1, E", 0x4b, 0),
		new OpCode("BIT 1, H", 0x4c, 0),
		new OpCode("BIT 1, [HL]", 0x4e, 0),
		new OpCode("BIT 1, L", 0x4d, 0),
		new OpCode("BIT 2, A", 0x57, 0),
		new OpCode("BIT 2, B", 0x50, 0),
		new OpCode("BIT 2, C", 0x51, 0),
		new OpCode("BIT 2, D", 0x52, 0),
		new OpCode("BIT 2, E", 0x53, 0),
		new OpCode("BIT 2, H", 0x54, 0),
		new OpCode("BIT 2, [HL]", 0x56, 0),
		new OpCode("BIT 2, L", 0x55, 0),
		new OpCode("BIT 3, A", 0x5f, 0),
		new OpCode("BIT 3, B", 0x58, 0),
		new OpCode("BIT 3, C", 0x59, 0),
		new OpCode("BIT 3, D", 0x5a, 0),
		new OpCode("BIT 3, E", 0x5b, 0),
		new OpCode("BIT 3, H", 0x5c, 0),
		new OpCode("BIT 3, [HL]", 0x5e, 0),
		new OpCode("BIT 3, L", 0x5d, 0),
		new OpCode("BIT 4, A", 0x67, 0),
		new OpCode("BIT 4, B", 0x60, 0),
		new OpCode("BIT 4, C", 0x61, 0),
		new OpCode("BIT 4, D", 0x62, 0),
		new OpCode("BIT 4, E", 0x63, 0),
		new OpCode("BIT 4, H", 0x64, 0),
		new OpCode("BIT 4, [HL]", 0x66, 0),
		new OpCode("BIT 4, L", 0x65, 0),
		new OpCode("BIT 5, A", 0x6f, 0),
		new OpCode("BIT 5, B", 0x68, 0),
		new OpCode("BIT 5, C", 0x69, 0),
		new OpCode("BIT 5, D", 0x6a, 0),
		new OpCode("BIT 5, E", 0x6b, 0),
		new OpCode("BIT 5, H", 0x6c, 0),
		new OpCode("BIT 5, [HL]", 0x6e, 0),
		new OpCode("BIT 5, L", 0x6d, 0),
		new OpCode("BIT 6, A", 0x77, 0),
		new OpCode("BIT 6, B", 0x70, 0),
		new OpCode("BIT 6, C", 0x71, 0),
		new OpCode("BIT 6, D", 0x72, 0),
		new OpCode("BIT 6, E", 0x73, 0),
		new OpCode("BIT 6, H", 0x74, 0),
		new OpCode("BIT 6, [HL]", 0x76, 0),
		new OpCode("BIT 6, L", 0x75, 0),
		new OpCode("BIT 7, A", 0x7f, 0),
		new OpCode("BIT 7, B", 0x78, 0),
		new OpCode("BIT 7, C", 0x79, 0),
		new OpCode("BIT 7, D", 0x7a, 0),
		new OpCode("BIT 7, E", 0x7b, 0),
		new OpCode("BIT 7, H", 0x7c, 0),
		new OpCode("BIT 7, [HL]", 0x7e, 0),
		new OpCode("BIT 7, L", 0x7d, 0),
		new OpCode("RES 0, A", 0x87, 0),
		new OpCode("RES 0, B", 0x80, 0),
		new OpCode("RES 0, C", 0x81, 0),
		new OpCode("RES 0, D", 0x82, 0),
		new OpCode("RES 0, E", 0x83, 0),
		new OpCode("RES 0, H", 0x84, 0),
		new OpCode("RES 0, [HL]", 0x86, 0),
		new OpCode("RES 0, L", 0x85, 0),
		new OpCode("RES 1, A", 0x8f, 0),
		new OpCode("RES 1, B", 0x88, 0),
		new OpCode("RES 1, C", 0x89, 0),
		new OpCode("RES 1, D", 0x8a, 0),
		new OpCode("RES 1, E", 0x8b, 0),
		new OpCode("RES 1, H", 0x8c, 0),
		new OpCode("RES 1, [HL]", 0x8e, 0),
		new OpCode("RES 1, L", 0x8d, 0),
		new OpCode("RES 2, A", 0x97, 0),
		new OpCode("RES 2, B", 0x90, 0),
		new OpCode("RES 2, C", 0x91, 0),
		new OpCode("RES 2, D", 0x92, 0),
		new OpCode("RES 2, E", 0x93, 0),
		new OpCode("RES 2, H", 0x94, 0),
		new OpCode("RES 2, [HL]", 0x96, 0),
		new OpCode("RES 2, L", 0x95, 0),
		new OpCode("RES 3, A", 0x9f, 0),
		new OpCode("RES 3, B", 0x98, 0),
		new OpCode("RES 3, C", 0x99, 0),
		new OpCode("RES 3, D", 0x9a, 0),
		new OpCode("RES 3, E", 0x9b, 0),
		new OpCode("RES 3, H", 0x9c, 0),
		new OpCode("RES 3, [HL]", 0x9e, 0),
		new OpCode("RES 3, L", 0x9d, 0),
		new OpCode("RES 4, A", 0xa7, 0),
		new OpCode("RES 4, B", 0xa0, 0),
		new OpCode("RES 4, C", 0xa1, 0),
		new OpCode("RES 4, D", 0xa2, 0),
		new OpCode("RES 4, E", 0xa3, 0),
		new OpCode("RES 4, H", 0xa4, 0),
		new OpCode("RES 4, [HL]", 0xa6, 0),
		new OpCode("RES 4, L", 0xa5, 0),
		new OpCode("RES 5, A", 0xaf, 0),
		new OpCode("RES 5, B", 0xa8, 0),
		new OpCode("RES 5, C", 0xa9, 0),
		new OpCode("RES 5, D", 0xaa, 0),
		new OpCode("RES 5, E", 0xab, 0),
		new OpCode("RES 5, H", 0xac, 0),
		new OpCode("RES 5, [HL]", 0xae, 0),
		new OpCode("RES 5, L", 0xad, 0),
		new OpCode("RES 6, A", 0xb7, 0),
		new OpCode("RES 6, B", 0xb0, 0),
		new OpCode("RES 6, C", 0xb1, 0),
		new OpCode("RES 6, D", 0xb2, 0),
		new OpCode("RES 6, E", 0xb3, 0),
		new OpCode("RES 6, H", 0xb4, 0),
		new OpCode("RES 6, [HL]", 0xb6, 0),
		new OpCode("RES 6, L", 0xb5, 0),
		new OpCode("RES 7, A", 0xbf, 0),
		new OpCode("RES 7, B", 0xb8, 0),
		new OpCode("RES 7, C", 0xb9, 0),
		new OpCode("RES 7, D", 0xba, 0),
		new OpCode("RES 7, E", 0xbb, 0),
		new OpCode("RES 7, H", 0xbc, 0),
		new OpCode("RES 7, [HL]", 0xbe, 0),
		new OpCode("RES 7, L", 0xbd, 0),
		new OpCode("RL A", 0x17, 0),
		new OpCode("RL B", 0x10, 0),
		new OpCode("RL C", 0x11, 0),
		new OpCode("RLC A", 0x7, 0),
		new OpCode("RLC B", 0x0, 0),
		new OpCode("RLC C", 0x1, 0),
		new OpCode("RLC D", 0x2, 0),
		new OpCode("RLC E", 0x3, 0),
		new OpCode("RLC H", 0x4, 0),
		new OpCode("RLC [HL]", 0x6, 0),
		new OpCode("RLC L", 0x5, 0),
		new OpCode("RL D", 0x12, 0),
		new OpCode("RL E", 0x13, 0),
		new OpCode("RL H", 0x14, 0),
		new OpCode("RL [HL]", 0x16, 0),
		new OpCode("RL L", 0x15, 0),
		new OpCode("RR A", 0x1f, 0),
		new OpCode("RR B", 0x18, 0),
		new OpCode("RR C", 0x19, 0),
		new OpCode("RRC A", 0xf, 0),
		new OpCode("RRC B", 0x8, 0),
		new OpCode("RRC C", 0x9, 0),
		new OpCode("RRC D", 0xa, 0),
		new OpCode("RRC E", 0xb, 0),
		new OpCode("RRC H", 0xc, 0),
		new OpCode("RRC [HL]", 0xe, 0),
		new OpCode("RRC L", 0xd, 0),
		new OpCode("RR D", 0x1a, 0),
		new OpCode("RR E", 0x1b, 0),
		new OpCode("RR H", 0x1c, 0),
		new OpCode("RR [HL]", 0x1e, 0),
		new OpCode("RR L", 0x1d, 0),
		new OpCode("SWAP A", 0x37, 0),
		new OpCode("SWAP B", 0x30, 0),
		new OpCode("SWAP C", 0x31, 0),
		new OpCode("SWAP D", 0x32, 0),
		new OpCode("SWAP E", 0x33, 0),
		new OpCode("SWAP H", 0x34, 0),
		new OpCode("SWAP [HL]", 0x36, 0),
		new OpCode("SWAP L", 0x35, 0),
		new OpCode("SET 0, A", 0xc7, 0),
		new OpCode("SET 0, B", 0xc0, 0),
		new OpCode("SET 0, C", 0xc1, 0),
		new OpCode("SET 0, D", 0xc2, 0),
		new OpCode("SET 0, E", 0xc3, 0),
		new OpCode("SET 0, H", 0xc4, 0),
		new OpCode("SET 0, [HL]", 0xc6, 0),
		new OpCode("SET 0, L", 0xc5, 0),
		new OpCode("SET 1, A", 0xcf, 0),
		new OpCode("SET 1, B", 0xc8, 0),
		new OpCode("SET 1, C", 0xc9, 0),
		new OpCode("SET 1, D", 0xca, 0),
		new OpCode("SET 1, E", 0xcb, 0),
		new OpCode("SET 1, H", 0xcc, 0),
		new OpCode("SET 1, [HL]", 0xce, 0),
		new OpCode("SET 1, L", 0xcd, 0),
		new OpCode("SET 2, A", 0xd7, 0),
		new OpCode("SET 2, B", 0xd0, 0),
		new OpCode("SET 2, C", 0xd1, 0),
		new OpCode("SET 2, D", 0xd2, 0),
		new OpCode("SET 2, E", 0xd3, 0),
		new OpCode("SET 2, H", 0xd4, 0),
		new OpCode("SET 2, [HL]", 0xd6, 0),
		new OpCode("SET 2, L", 0xd5, 0),
		new OpCode("SET 3, A", 0xdf, 0),
		new OpCode("SET 3, B", 0xd8, 0),
		new OpCode("SET 3, C", 0xd9, 0),
		new OpCode("SET 3, D", 0xda, 0),
		new OpCode("SET 3, E", 0xdb, 0),
		new OpCode("SET 3, H", 0xdc, 0),
		new OpCode("SET 3, [HL]", 0xde, 0),
		new OpCode("SET 3, L", 0xdd, 0),
		new OpCode("SET 4, A", 0xe7, 0),
		new OpCode("SET 4, B", 0xe0, 0),
		new OpCode("SET 4, C", 0xe1, 0),
		new OpCode("SET 4, D", 0xe2, 0),
		new OpCode("SET 4, E", 0xe3, 0),
		new OpCode("SET 4, H", 0xe4, 0),
		new OpCode("SET 4, [HL]", 0xe6, 0),
		new OpCode("SET 4, L", 0xe5, 0),
		new OpCode("SET 5, A", 0xef, 0),
		new OpCode("SET 5, B", 0xe8, 0),
		new OpCode("SET 5, C", 0xe9, 0),
		new OpCode("SET 5, D", 0xea, 0),
		new OpCode("SET 5, E", 0xeb, 0),
		new OpCode("SET 5, H", 0xec, 0),
		new OpCode("SET 5, [HL]", 0xee, 0),
		new OpCode("SET 5, L", 0xed, 0),
		new OpCode("SET 6, A", 0xf7, 0),
		new OpCode("SET 6, B", 0xf0, 0),
		new OpCode("SET 6, C", 0xf1, 0),
		new OpCode("SET 6, D", 0xf2, 0),
		new OpCode("SET 6, E", 0xf3, 0),
		new OpCode("SET 6, H", 0xf4, 0),
		new OpCode("SET 6, [HL]", 0xf6, 0),
		new OpCode("SET 6, L", 0xf5, 0),
		new OpCode("SET 7, A", 0xff, 0),
		new OpCode("SET 7, B", 0xf8, 0),
		new OpCode("SET 7, C", 0xf9, 0),
		new OpCode("SET 7, D", 0xfa, 0),
		new OpCode("SET 7, E", 0xfb, 0),
		new OpCode("SET 7, H", 0xfc, 0),
		new OpCode("SET 7, [HL]", 0xfe, 0),
		new OpCode("SET 7, L", 0xfd, 0),
		new OpCode("SLA A", 0x27, 0),
		new OpCode("SLA B", 0x20, 0),
		new OpCode("SLA C", 0x21, 0),
		new OpCode("SLA D", 0x22, 0),
		new OpCode("SLA E", 0x23, 0),
		new OpCode("SLA H", 0x24, 0),
		new OpCode("SLA [HL]", 0x26, 0),
		new OpCode("SLA L", 0x25, 0),
		new OpCode("SRA A", 0x2f, 0),
		new OpCode("SRA B", 0x28, 0),
		new OpCode("SRA C", 0x29, 0),
		new OpCode("SRA D", 0x2a, 0),
		new OpCode("SRA E", 0x2b, 0),
		new OpCode("SRA H", 0x2c, 0),
		new OpCode("SRA [HL]", 0x2e, 0),
		new OpCode("SRA L", 0x2d, 0),
		new OpCode("SRL A", 0x3f, 0),
		new OpCode("SRL B", 0x38, 0),
		new OpCode("SRL C", 0x39, 0),
		new OpCode("SRL D", 0x3a, 0),
		new OpCode("SRL E", 0x3b, 0),
		new OpCode("SRL H", 0x3c, 0),
		new OpCode("SRL [HL]", 0x3e, 0),
		new OpCode("SRL L", 0x3d, 0),
	};

	 // read [hl]
  public static List<Integer> loadFromHl = Arrays.asList(new Integer[]{0x8e, 0x86, 0xa6, 0xbe, 0x7e, 0x3a, 0x2a, 0x46, 0x4e, 0x56, 0x5e, 0x66, 0x6e, 0xb6, 0x9e, 0x96, 0xae});

	// conditional JP, CALL, JR, RET
	public static List<Integer> controlFlowFork = Arrays.asList(new Integer[]{0xda, 0xd2, 0xc2, 0xca, 0xdc, 0xd4, 0xc4, 0xcc, 0x38, 0x30, 0x20, 0x28, 0xd8, 0xd0, 0xc0, 0xc8});
	// JP and CALL
	public static List<Integer> explicitAbsoluteJump = Arrays.asList(new Integer[]{0xda, 0xd2, 0xc2, 0xca, 0xc3, 0xdc, 0xd4, 0xc4, 0xcc, 0xcd});
	// JR
	public static List<Integer> explicitRelativeJump = Arrays.asList(new Integer[]{0x38, 0x30, 0x20, 0x28, 0x18});
	// RST
	public static List<Integer> reset = Arrays.asList(new Integer[]{0xc7, 0xcf, 0xd7, 0xdf, 0xe7, 0xef, 0xf7, 0xff});

	// JP [HL], JP, JR, DEBUG, RET(I), /*RST (x8), STOP */
	public static List<Integer> noContinue = Arrays.asList(new Integer[]{0xe9, 0xc3, 0x18, 0xed, 0xd9, 0xc9, /*0xc7, 0xcf, 0xd7, 0xdf, 0xe7, 0xef, 0xf7, 0xff, 0x10*/});

	public static OpCode[] opCodes = new OpCode[0x100];
	public static OpCode[] opCodesCB = new OpCode[0x100];
	static {
		for(int i=0;i<0x100;i++) {
			for(OpCode op : opCodesUnsorted)
				if(op.opCode == i)
					opCodes[i] = op;
			for(OpCode op : opCodesCBUnsorted)
				if(op.opCode == i)
					opCodesCB[i] = op;
		}
		for(int i=0;i<0x100;i++)
			if(opCodes[i] == null)
				opCodes[i] = opCodesUnsorted[0];
	}
}
